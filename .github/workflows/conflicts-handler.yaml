name: Automate After Merge

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  automate-after-merge:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    outputs:
      LATEST_MAIN_VERSION: ${{ steps.set-versions.outputs.LATEST_MAIN_VERSION }}
      MY_VERSION: ${{ steps.set-versions.outputs.MY_VERSION }}
    env:
      LATEST_MAIN_VERSION: ''
      MY_VERSION: ''
      MY_NEW_VERSION: ''
      MY_FILE: ''
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 

      - name: Set Versions
        id: set-versions
        run: |
          echo "My Last Version is: git show main:flyway/version.log | grep -oE '[0-9]+\.[0-9]+' | tail -n 1"
          echo "My version: git show flyway/version.log | grep -oE '[0-9]+\.[0-9]+' | tail -n 1"
          echo "LATEST_MAIN_VERSION=$(git show main:flyway/version.log | grep -oE '[0-9]+\.[0-9]+' | tail -n 1)" >> "$GITHUB_OUTPUT"
          echo "MY_VERSION=$(git show flyway/version.log | grep -oE '[0-9]+\.[0-9]+' | tail -n 1)" >> "$GITHUB_OUTPUT"
  handler-version:
    runs-on: ubuntu-latest
    if: ${{ success() && github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    needs: automate-after-merge
    - env:
      LATEST_MAIN_VERSION: ${{needs.job1.outputs.output1}}
      MY_VERSION: ${{needs.job1.outputs.output2}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 

      - name: Set Versions
        id: show-versions
        run: |
          echo "My Last Version is: $LATEST_MAIN_VERSION"
          echo "MY_VERSION"